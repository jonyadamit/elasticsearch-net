We can create the analysis settings as part of the create index call

We then read back the analysis settings using `GetIndexSettings()`, you can use this method to get the settings for 1, or many indices in one go

Here we assert over the response from `GetIndexSettings()` after the index creation to make sure our analysis chain did infact 
store our html char filter called `stripMe`

[source, csharp]
----
response.Indices.Should().NotBeNull().And.HaveCount(1);
var index = response.Indices.Values.First();
index.Should().NotBeNull();
index.Settings.Should().NotBeNull();
var indexSettings = index.Settings;
indexSettings.Analysis.Should().NotBeNull();
indexSettings.Analysis.CharFilters.Should().NotBeNull();
var firstHtmlCharFilter = indexSettings.Analysis.CharFilters["stripMe"];
firstHtmlCharFilter.Should().NotBeNull();
----
Elasticsearch has an `UpdateIndexSettings()` call but in order to be able to use it you first need to close the index and reopen it afterwards

Here we add a new `HtmlStripCharFilter` called `differentHtml`

Here we assert that the `GetIndexSettings()` call after the update sees the newly introduced `differentHmtl` char filter

[source, csharp]
----
response.Indices.Should().NotBeNull().And.HaveCount(1);
var index = response.Indices.Values.First();
index.Should().NotBeNull();
index.Settings.Should().NotBeNull();
var indexSettings = index.Settings;
indexSettings.Analysis.Should().NotBeNull();
indexSettings.Analysis.CharFilters.Should().NotBeNull();
var firstHtmlCharFilter = indexSettings.Analysis.CharFilters["differentHtml"];
firstHtmlCharFilter.Should().NotBeNull();
----
