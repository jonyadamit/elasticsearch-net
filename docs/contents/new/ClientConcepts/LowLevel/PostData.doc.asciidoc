# Post data
The low level allows you to post a string, byte[] array directly. On top of this if you pass a list of strings or objects
they will be serialized in Elasticsearch's special bulk/multi format.

Even though the argument for postData on the low level client takes a PostData
You can rely on C# implicit conversion to abstract the notion of PostData completely.
You can implicitly convert from the following types.

[source, csharp]
----
var fromString = ImplicitlyConvertsFrom(@string);
----
[source, csharp]
----
var fromByteArray = ImplicitlyConvertsFrom(bytes);
var fromListOfString = ImplicitlyConvertsFrom(listOfStrings);
var fromListOfObject = ImplicitlyConvertsFrom(listOfObjects);
var fromObject = ImplicitlyConvertsFrom(@object);
----
postData Bytes will always be set if it originated from a byte

[source, csharp]
----
fromByteArray.WrittenBytes.Should().BeSameAs(bytes);
----
[source, csharp]
----
fromString.Type.Should().Be(PostType.LiteralString);
fromByteArray.Type.Should().Be(PostType.ByteArray);
fromListOfString.Type.Should().Be(PostType.EnumerableOfString);
fromListOfObject.Type.Should().Be(PostType.EnumerableOfObject);
fromObject.Type.Should().Be(PostType.Serializable);
fromString = ImplicitlyConvertsFrom(fromString);
fromByteArray = ImplicitlyConvertsFrom(fromByteArray);
fromListOfString = ImplicitlyConvertsFrom(fromListOfString);
fromListOfObject = ImplicitlyConvertsFrom(fromListOfObject);
fromObject = ImplicitlyConvertsFrom(fromObject);
fromString.Type.Should().Be(PostType.LiteralString);
fromByteArray.Type.Should().Be(PostType.ByteArray);
fromListOfString.Type.Should().Be(PostType.EnumerableOfString);
fromListOfObject.Type.Should().Be(PostType.EnumerableOfObject);
fromObject.Type.Should().Be(PostType.Serializable);
await this.AssertOn(new ConnectionSettings());
await this.AssertOn(new ConnectionConfiguration());
----
Although each implicitly types behaves slightly differently 

[source, csharp]
----
await Post(()=>@string, writes: Utf8Bytes(@string), storesBytes: true, settings: settings);
----
[source, csharp]
----
await Post(()=>bytes, writes: bytes, storesBytes: true, settings: settings);
----
When passing a list of strings we assume its a list of valid serialized json that we 
join with newlinefeeds making sure there is a trailing linefeed 

[source, csharp]
----
await Post(()=>listOfStrings, writes: multiStringJson, storesBytes: true, settings: settings);
----
When passing a list of object we assume its a list of objects we need to serialize
individually to json and join with newlinefeeds aking sure there is a trailing linefeed 

[source, csharp]
----
await Post(()=>listOfObjects, writes: multiObjectJson, storesBytes: false, settings: settings);
----
In all other cases postdata is serialized as is. 

[source, csharp]
----
await Post(()=>@object, writes: objectJson, storesBytes: false, settings: settings);
----
If you want to maintain a copy of the request that went out use the following settings 

[source, csharp]
----
settings = new ConnectionSettings().DisableDirectStreaming();
----
by forcing `DisableDirectStreaming` serializing happens first in a private MemoryStream 
so we can get a hold of the serialized bytes 

[source, csharp]
----
await Post(()=>listOfObjects, writes: multiObjectJson, storesBytes: true, settings: settings);
----
this behavior can also be observed when serializing a simple object using `DisableDirectStreaming` 

[source, csharp]
----
await Post(()=>@object, writes: objectJson, storesBytes: true, settings: settings);
----
[source, csharp]
----
PostAssert(postData(), writes, storesBytes, settings);
await PostAssertAsync(postData(), writes, storesBytes, settings);
postData.Write(ms, settings);
var sentBytes = ms.ToArray();
sentBytes.Should().Equal(writes);
postData.WrittenBytes.Should().NotBeNull();
postData.WrittenBytes.Should().BeNull();
await postData.WriteAsync(ms, settings);
var sentBytes = ms.ToArray();
sentBytes.Should().Equal(writes);
postData.WrittenBytes.Should().NotBeNull();
postData.WrittenBytes.Should().BeNull();
----
