[source, csharp]
----
response.Documents.Should().NotBeEmpty().And.HaveCount(2).And.OnlyContain(d => d.Found);
var termvectorDoc = response.Documents.FirstOrDefault(d => d.TermVectors.Count > 0);
termvectorDoc.Should().NotBeNull();
termvectorDoc.TermVectors.Should().NotBeEmpty().And.ContainKey("firstName");
var vectors = termvectorDoc.TermVectors["firstName"];
vectors.Terms.Should().NotBeEmpty();
vectorTerm.Key.Should().NotBeNullOrWhiteSpace();
vectorTerm.Value.Should().NotBeNull();
vectorTerm.Value.TermFrequency.Should().BeGreaterThan(0);
vectorTerm.Value.DocumentFrequency.Should().BeGreaterThan(0);
vectorTerm.Value.TotalTermFrequency.Should().BeGreaterThan(0);
vectorTerm.Value.Tokens.Should().NotBeEmpty();
var token = vectorTerm.Value.Tokens.First();
token.EndOffset.Should().BeGreaterThan(0);
----
[source, csharp]
----
d => d
.Index<Developer>()
.GetMany<Developer>(Developer.Developers.Select(p => p.Id).Take(2), (p, i) => p.FieldStatistics().Payloads().TermStatistics().Positions().Offsets())
----
[source, csharp]
----
new MultiTermVectorsRequest(Index<Developer>())
		{
Documents = Developer.Developers.Select(p => p.Id).Take(2)
	.Select(n => new MultiTermVectorOperation<Developer>(n)
	{
		FieldStatistics = true,
		Payloads = true,
		TermStatistics = true,
		Positions = true,
		Offsets = true
	})
		}
----
