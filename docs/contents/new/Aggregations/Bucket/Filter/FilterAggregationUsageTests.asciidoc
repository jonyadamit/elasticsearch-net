Defines a single bucket of all the documents in the current document set context that match a specified filter. 
Often this will be used to narrow down the current aggregation context to a specific set of documents.
Be sure to read the elasticsearch documentation {ref}/search-aggregations-bucket-filter-aggregation.html[on this subject here]

[source, csharp]
----
s => s
.Aggregations(aggs => aggs
	.Filter("bethels_projects", date => date
		.Filter(q => q.Term(p => p.LeadDeveloper.FirstName, FirstNameToFind))
		.Aggregations(childAggs => childAggs
.Terms("project_tags", avg => avg.Field(p => p.CuratedTags.First().Name))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new FilterAggregation("bethels_projects")
	{
		Filter = new TermQuery { Field = Field<Project>(p => p.LeadDeveloper.FirstName), Value = FirstNameToFind },
		Aggregations =
new TermsAggregation("project_tags") { Field = Field<Project>(p => p.CuratedTags.First().Name) }
	}
}
----
[source, csharp]
----
response.IsValid.Should().BeTrue();
----
Using the `.Agg` aggregation helper we can fetch our aggregation results easily 
in the correct type. [Be sure to read more about `.Agg` vs `.Aggregations` on the response here]()

[source, csharp]
----
var filterAgg = response.Aggs.Filter("bethels_projects");
----
[source, csharp]
----
filterAgg.Should().NotBeNull();
filterAgg.DocCount.Should().BeGreaterThan(0);
var tags = filterAgg.Terms("project_tags");
tags.Should().NotBeNull();
tags.Items.Should().NotBeEmpty();
----
