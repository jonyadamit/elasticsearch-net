Defines a multi bucket aggregations where each bucket is associated with a filter. 
Each bucket will collect all documents that match its associated filter.
Be sure to read the elasticsearch documentation {ref}/search-aggregations-bucket-filters-aggregation.html[on this subject here]

== Named filters *

[source, csharp]
----
s => s
.Aggregations(aggs => aggs
	.Filters("projects_by_state", agg => agg
		.NamedFilters(filters => filters
.Filter("belly_up", f => f.Term(p => p.State, StateOfBeing.BellyUp))
.Filter("stable", f => f.Term(p => p.State, StateOfBeing.Stable))
.Filter("very_active", f => f.Term(p => p.State, StateOfBeing.VeryActive))
		)
		.Aggregations(childAggs => childAggs
.Terms("project_tags", avg => avg.Field(p => p.CuratedTags.First().Name))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new FiltersAggregation("projects_by_state")
	{
		Filters = new NamedFiltersContainer
		{
	{ "belly_up", Query<Project>.Term(p=>p.State, StateOfBeing.BellyUp) },
	{ "stable", Query<Project>.Term(p=>p.State, StateOfBeing.Stable) },
	{ "very_active", Query<Project>.Term(p=>p.State, StateOfBeing.VeryActive) }
		},
		Aggregations =
new TermsAggregation("project_tags") { Field = Field<Project>(p => p.CuratedTags.First().Name) }
	}
}
----
[source, csharp]
----
response.IsValid.Should().BeTrue();
----
Using the `.Agg` aggregation helper we can fetch our aggregation results easily 
in the correct type. [Be sure to read more about `.Agg` vs `.Aggregations` on the response here]()

[source, csharp]
----
var filterAgg = response.Aggs.Filters("projects_by_state");
----
[source, csharp]
----
filterAgg.Should().NotBeNull();
var namedResult = filterAgg.NamedBucket("belly_up");
namedResult.Should().NotBeNull();
namedResult.DocCount.Should().BeGreaterThan(0);
namedResult = filterAgg.NamedBucket("stable");
namedResult.Should().NotBeNull();
namedResult.DocCount.Should().BeGreaterThan(0);
namedResult = filterAgg.NamedBucket("very_active");
namedResult.Should().NotBeNull();
namedResult.DocCount.Should().BeGreaterThan(0);
----
== Anonymous filters *

[source, csharp]
----
s => s
.Aggregations(aggs => aggs
	.Filters("projects_by_state", agg => agg
		.AnonymousFilters(
f => f.Term(p => p.State, StateOfBeing.BellyUp),
f => f.Term(p => p.State, StateOfBeing.Stable),
f => f.Term(p => p.State, StateOfBeing.VeryActive)
		)
		.Aggregations(childAggs => childAggs
.Terms("project_tags", avg => avg.Field(p => p.CuratedTags.First().Name))
		)
	)
)
----
[source, csharp]
----
new SearchRequest<Project>
{
	Aggregations = new FiltersAggregation("projects_by_state")
	{
		Filters = new List<IQueryContainer>
		{
	 Query<Project>.Term(p=>p.State, StateOfBeing.BellyUp) ,
	 Query<Project>.Term(p=>p.State, StateOfBeing.Stable) ,
	 Query<Project>.Term(p=>p.State, StateOfBeing.VeryActive)
		},
		Aggregations =
new TermsAggregation("project_tags") { Field = Field<Project>(p => p.CuratedTags.First().Name) }
	}
}
----
[source, csharp]
----
response.IsValid.Should().BeTrue();
----
Using the `.Agg` aggregation helper we can fetch our aggregation results easily 
in the correct type. [Be sure to read more about `.Agg` vs `.Aggregations` on the response here]()

[source, csharp]
----
var filterAgg = response.Aggs.Filters("projects_by_state");
----
[source, csharp]
----
filterAgg.Should().NotBeNull();
var results = filterAgg.AnonymousBuckets();
results.Count.Should().Be(3);
singleBucket.DocCount.Should().BeGreaterThan(0);
----
