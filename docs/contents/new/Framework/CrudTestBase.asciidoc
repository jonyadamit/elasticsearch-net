[source, csharp]
----
var client = this.Client;
var dict = new Dictionary<ClientCall, IResponse>();
dict.Add(ClientCall.Fluent, fluent(RandomFluent, client, f => fluentBody(RandomFluent, f)));
dict.Add(ClientCall.FluentAsync, await fluentAsync(RandomFluentAsync, client, f => fluentBody(RandomFluentAsync, f)));
dict.Add(ClientCall.Initializer, request(RandomInitializer, client, initializerBody(RandomInitializer)));
dict.Add(ClientCall.InitializerAsync, await requestAsync(RandomInitializerAsync, client, initializerBody(RandomInitializerAsync)));
await this._createResponse;
this.WaitForYellow();
await this._createGetResponse;
await this._updateResponse;
this.WaitForYellow();
await this._updateGetResponse;
await this._deleteResponse;
this.WaitForYellow();
await this._deleteGetResponse;
var response = kv.Value as TResponse;
assert(response);
this.Client.ClusterHealth(g => g.WaitForStatus(WaitForStatus.Yellow));
await this.AssertOnAllResponses(this._deleteResponse, assert);
await this.AssertOnAllResponses(this._deleteGetResponse, assert);
----
