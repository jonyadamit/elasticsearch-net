[source, csharp]
----
var defaultSettings = new ConnectionSettings(new SingleNodeConnectionPool(CreateNode(port)), CreateConnection())
				.SetDefaultIndex("default-index")
				.PrettyJson()
				.InferMappingFor<Project>(map => map
					.IndexName("project")
					.IdProperty(p => p.Name)
				)
				.InferMappingFor<CommitActivity>(map => map
					.IndexName("project")
					.TypeName("commits")
				)
				.InferMappingFor<Developer>(map => map
					.IndexName("devs")
					.Ignore(p => p.PrivateValue)
					.Rename(p => p.OnlineHandle, "nickname")
				)
				//We try and fetch the test name during integration tests when running fiddler to send the name 
				//as the TestMethod header, this allows us to quickly identify which test sent which request
				.SetGlobalHeaders(new NameValueCollection { { "TestMethod", ExpensiveTestNameForIntegrationTests() } });
var settings = modifySettings != null ? modifySettings(defaultSettings) : defaultSettings;
var serializer = new NestSerializer(new ConnectionSettings());
string fixedResult;
serializer.Serialize(responseJson, ms);
fixedResult =Encoding.UTF8.GetString(ms.ToArray());
var connection = new InMemoryConnection(fixedResult);
var connectionPool = new SingleNodeConnectionPool(new Uri("http://localhost:9200"));
var settings = new ConnectionSettings(connectionPool, connection);
var st = new StackTrace();
var types = GetTypes(st);
var types = (from f in st.GetFrames()
				let method = f.GetMethod()
				where method != null
				let type = method.DeclaringType
				where type.FullName.StartsWith("Tests.") && !type.FullName.StartsWith("Tests.Framework.")
				select type).ToList();
----
