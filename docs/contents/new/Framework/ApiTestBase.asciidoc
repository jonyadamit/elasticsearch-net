[source, csharp]
----
var client = this.Client;
this.BeforeAllCalls(client, UniqueValues);
var dict = new Dictionary<ClientCall, IResponse>();
this.CallIsolatedValue = UniqueValues[ClientCall.Fluent];
OnBeforeCall(client);
dict.Add(ClientCall.Fluent, fluent(client, this.Fluent));
OnAfterCall(client);
this.CallIsolatedValue = UniqueValues[ClientCall.FluentAsync];
OnBeforeCall(client);
dict.Add(ClientCall.FluentAsync, await fluentAsync(client, this.Fluent));
OnAfterCall(client);
this.CallIsolatedValue = UniqueValues[ClientCall.Initializer];
OnBeforeCall(client);
dict.Add(ClientCall.Initializer, request(client, this.Initializer));
OnAfterCall(client);
this.CallIsolatedValue = UniqueValues[ClientCall.InitializerAsync];
OnBeforeCall(client);
dict.Add(ClientCall.InitializerAsync, await requestAsync(client, this.Initializer));
OnAfterCall(client);
var paths = (this.UrlPath ?? "").Split(new[] { '?' }, 2);
string path = paths.First(), query = string.Empty;
query = paths.Last();
var expectedUri = new UriBuilder("http", "localhost", Port, path, "?" + query).Uri;
u.AbsolutePath.Should().Be(expectedUri.AbsolutePath);
u = new UriBuilder(u.Scheme, u.Host, u.Port, u.AbsolutePath, u.Query.Replace("pretty=true", "")).Uri;
var queries = new[] { u.Query, expectedUri.Query };
queries.Last().Should().Be(queries.First());
var clientKeyValues = u.Query.Substring(1).Split('&')
				.Select(v => v.Split('='))
				.Where(k => !string.IsNullOrWhiteSpace(k[0]))
				.ToDictionary(k => k[0], v => v.Last());
var expectedKeyValues = expectedUri.Query.Substring(1).Split('&')
				.Select(v => v.Split('='))
				.Where(k => !string.IsNullOrWhiteSpace(k[0]))
				.ToDictionary(k => k[0], v => v.Last());
clientKeyValues.Count().Should().Be(expectedKeyValues.Count());
clientKeyValues.Should().ContainKeys(expectedKeyValues.Keys.ToArray());
clientKeyValues.Should().Equal(expectedKeyValues);
var responses = await this._responses;
var response = kv.Value as TResponse;
this.CallIsolatedValue = UniqueValues[kv.Key];
assert(response);
----
