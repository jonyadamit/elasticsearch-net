[source, csharp]
----
var rawFieldsTemplateExists = this.Client.IndexTemplateExists("raw_fields").Exists;
this.CreateIndicesAndMappings();
CreateRawFieldsIndexTemplate();
CreateProjectIndex();
CreateDeveloperIndex();
this.Client.IndexMany(Project.Projects);
this.Client.IndexMany(Developer.Developers);
this.Client.Refresh(Nest.Indices.Index<Project>().And<Developer>());
var putTemplateResult = this.Client.PutIndexTemplate("raw_fields", p => p
				.Template("*") //match on all created indices
				.Settings(s => s
					.NumberOfReplicas(0)
					.NumberOfShards(2)
				)
				.Mappings(pm => pm
					.Map("_default_", m => m
						.DynamicTemplates(dt => dt
							.DynamicTemplate("raw_field", dtt => dtt
								.Match("*") //matches all fields
								.MatchMappingType("string") //that are a string
								.Mapping(tm => tm
									.String(sm => sm //map as string
										.Fields(f => f //with a multifield 'raw' that is not analyzed
											.String(ssm => ssm.Name("raw").Index(FieldIndexOption.NotAnalyzed))
										)
									)
								)
							)
						)
					)
				)
				);
putTemplateResult.IsValid.Should().BeTrue();
var createDeveloperIndex = this.Client.CreateIndex(Index<Developer>(), c => c
				.Mappings(map => map
					.Map<Developer>(m => m
						.AutoMap()
						.Properties(DeveloperProperties)
					)
				)
			);
createDeveloperIndex.IsValid.Should().BeTrue();
var createProjectIndex = this.Client.CreateIndex(typeof(Project), c => c
				.Aliases(a => a
					.Alias("projects-alias")
				)
				.Mappings(map => map
					.Map<Project>(m => m
						.Properties(props => props
							.String(s => s.Name(p => p.Name).NotAnalyzed())
							.Date(d => d.Name(p => p.StartedOn))
							.String(d => d.Name(p => p.State).NotAnalyzed())
							.Nested<Tag>(mo => mo
								.Name(p => p.Tags)
								.Properties(TagProperties)
							)
							.Object<Developer>(o => o
								.Name(p => p.LeadDeveloper)
								.Properties(DeveloperProperties)
							)
							.GeoPoint(g => g.Name(p => p.Location))
						)
					)
					.Map<CommitActivity>(m => m
						.SetParent<Project>()
						.Properties(props => props
							.Object<Developer>(o => o
								.Name(p => p.Committer)
								.Properties(DeveloperProperties)
							)
							.String(prop => prop.Name(p => p.ProjectName).NotAnalyzed())
						)
					)
				)
				);
createProjectIndex.IsValid.Should().BeTrue();
----
